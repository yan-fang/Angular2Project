{
  "version": 3,
  "sources": [
    "AccountDetail-module.js",
    "AccountDetail-services.js",
    "AccountDetail-controller.js",
    "AccountDetail-directives.js",
    "AccountDetail-filters.js",
    "AccountDetail-bundle.js",
    "../../../../../../../../module-insertRequire.js"
  ],
  "names": [],
  "mappingsnnOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACvEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,AC9FA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACTA;AACA;AACA",
  "file": "AccountDetail-module.js",
  "sourcesContent": [
    "define('AccountDetailModule',['angular'], function(angular) {\n  'use strict';\n  var accountDetailModule = angular.module('AccountDetailsModule', ['ui.router', 'restangular', 'oc.lazyLoad',\n    'EaseProperties', 'easeAppUtils', 'ngAnimate', 'filterComponent', 'angular-lo-dash', 'ngLocale'\n  ]);\n\n  detailConfigFn.$inject = ['EaseConstant', 'easeFilesProvider'];\n\n  function detailConfigFn(EaseConstant, easeFilesProvider) {\n    var accountDetailsParentState = {\n      name: 'accountDetails',\n      url: '/accountDetails/:accountReferenceId/:lineOfBusiness',\n      abstract: true,\n      resolve: {\n        i18nData: ['EaseLocalizeService', function(EaseLocalizeService) {\n          return EaseLocalizeService.get('accountDetails');\n        }],\n      },\n      controller: 'AccountDetailsParentController'\n    };\n\n    var accountDetailsTransactionState = {\n      name: 'accountDetails.transactions',\n      parent: accountDetailsParentState,\n      controller: 'AccountDetailsTransactionController',\n      controllerAs: 'AccountTransactions'\n    };\n  }\n  accountDetailModule.config(detailConfigFn);\n});\n\n",
    "define('AccountDetailServices',['angular'], function(angular) {\n  'use strict';\n  angular.module('AccountDetailsModule')\n    .factory('accountDetailService', [\"EaseConstant\", \"EASEUtilsFactory\", \"$q\", \"Restangular\", \"EaseConstantFactory\", \"$animate\", \"easeExceptionsService\", \"summaryService\", \"featureToggleFactory\", function(EaseConstant, EASEUtilsFactory, $q, Restangular, EaseConstantFactory,\n      $animate, easeExceptionsService, summaryService, featureToggleFactory) {\n\n      var services = {};\n\n      services.getAccountPosition = function(referenceId) {\n        var deferred = $q.defer();\n        getFeatureToggleData().then(function() {\n          summaryService.get().then(function(data) {\n            var accountList = data.accounts.filter(filterCarouselAccountList);\n            var index = 0;\n            while (index < accountList.length) {\n              if (accountList[index].referenceId === referenceId) {\n                break;\n              }\n              index++;\n            }\n            var leftAccount = true;\n            var rightAccount = true;\n            var leftIndex = index - 1;\n            var rightIndex = index + 1;\n            if (index === 0) {\n              leftIndex = accountList.length - 1;\n            } else if (index === accountList.length - 1) {\n              rightIndex = 0;\n            }\n\n            leftAccount = {\n              isLeftNavigable: false,\n              account: accountList[leftIndex]\n            }\n\n            rightAccount = {\n              isRightNavigable: false,\n              account: accountList[rightIndex]\n            }\n\n            if (accountList.length === 1) {\n              leftAccount.isLeftNavigable = true;\n              rightAccount.isRightNavigable = true;\n            }\n\n            deferred.resolve({\n              showLeftArrow: leftAccount,\n              showRightArrow: rightAccount\n            });\n          });\n        });\n\n        return deferred.promise;\n      };\n\n      function getFeatureToggleData() {\n        var deferred = $q.defer();\n        var featureToggleData = featureToggleFactory.getFeatureToggleData();\n        if (_.isEmpty(featureToggleData)) {\n          featureToggleFactory.initializeFeatureToggleData().then(function(data) {\n            deferred.resolve(data);\n          })\n        } else {\n          deferred.resolve(featureToggleData);\n        }\n        return deferred.promise;\n      };\n\n      function filterCarouselAccountList(product) {\n        var featureToggleData = featureToggleFactory.getFeatureToggleData();\n        // Regression defect fix: adding retail accounts to carousel account list only if feature is enabled, can't do this in easeUtils as featureToggleFactory has a dependency on it\n        // we should remove below code once retail L2 is built into EASE\n        if (product.subCategory && product.subCategory.toLowerCase() === 'retail' && featureToggleData &&\n          featureToggleData[EaseConstant.features.enableRetailNavigation] && ['DDA', 'SA', 'MMA', 'CD'].indexOf(\n            product.category) !== -1) {\n          return true;\n        }\n\n        if (['COI'].indexOf(product.category) == 0) {\n          return false;\n        }\n        return !EASEUtilsFactory.isInActiveProduct(product).isNotClickable;\n      }\n\n      services.getAccountDetailsData = function(urlParams, accountDetailsRefId) {\n        return EASEUtilsFactory.getAccountDetailData(urlParams, accountDetailsRefId);\n      };\n      services.createUrl = function(urlParams, accountDetailsRefId) {\n        return EASEUtilsFactory.createAccountDetailUrl(urlParams, accountDetailsRefId);\n      };\n      services.appendMoreTransactions = function(currentSet, newSet, lineOfBusiness) {\n        newSet = this.processTransactions(lineOfBusiness, newSet);\n        for (var i = 0; i < newSet.entries.length; i++) {\n          currentSet.entries.push(newSet.entries[i]);\n        }\n        return currentSet;\n      };\n\n      services.getfilterResult = function(transactions, lineOfBusiness) {\n        transactions = this.processTransactions(lineOfBusiness, transactions);\n        return transactions;\n      };\n      return services;\n    }])\n    .factory('productTypeFactory', [\"EaseConstant\", \"$locale\", function(EaseConstant, $locale) {\n      return {\n        getProductType: function(data, lineOfBusiness) {\n          return EaseConstant.partialFilePath[lineOfBusiness][0] + EaseConstant.partialFilePath[lineOfBusiness]\n            [1];\n        },\n        getTransactionType: function(lineOfBusiness) {\n          if (typeof lineOfBusiness !== 'undefined') {\n            return EaseConstant.partialFilePath[lineOfBusiness][0] + EaseConstant.partialFilePath[\n              lineOfBusiness][2];\n          }\n        },\n        getCreditCardInfo: function(CreditCardNumber) {\n          return CreditCardNumber.substring(CreditCardNumber.length - 4, CreditCardNumber.length);\n        },\n        processAutoLoan: function(accountDetails) {\n          accountDetails.dteDueDate = new Date(accountDetails.dueDate);\n          accountDetails.dteDueDateMonth = $locale.DATETIME_FORMATS.MONTH[accountDetails.dteDueDate.getMonth()];\n          accountDetails.dteDueDateDay = accountDetails.dteDueDate.getDay();\n          console.log(accountDetails.vehicleIdentificationNumber);\n          accountDetails.strIDNumber = accountDetails.vehicleIdentificationNumber;\n          return accountDetails;\n        }\n      };\n    }])\n})\n;\n",
    "define('AccountDetailController',['angular'], function(angular) {\n  'use strict';\n\n  angular.module('AccountDetailsModule')\n    .controller('AccountDetailsParentController', detailsParentController)\n    .controller('AccountDetailsTransactionController', transactionsController)\n    .controller('AccountDetailsSettingsController', [\"$scope\", \"$stateParams\", function($scope, $stateParams) {}])\n    .constant('sortConstant', {\n      'dateAscending': 0,\n      'dateDescending': 1,\n      'merchantAscending': 2,\n      'merchantDescending': 3,\n      'categoryAscending': 4,\n      'categoryDescending': 5,\n      'amountAscending': 6,\n      'amountDescending': 7,\n      'balanceAscending': 8,\n      'balanceDescending': 9,\n      'descriptionAscending': 10,\n      'descriptionDescending': 11\n    });\n\n  function detailsParentController($scope, accountDetailsData, $state, $stateParams, productTypeFactory,\n    EaseConstant, $window,\n    accountDetailService, $animate, EASEUtilsFactory, EaseLocalizeService, easeTemplates) {\n    require(['async!' + EaseConstant.googleMaps.urlEnhTransaction], function() {\n      $window.gMapsLoaded = true;\n    });\n    document.body.scrollTop = 0;\n    EaseConstant.sortConstantKeys.kTransactionDate = 'dteTransactionDate';\n    EaseConstant.descendingSort.scheduled = true;\n    EaseConstant.descendingSort.pending = true;\n    EaseConstant.descendingSort.posted = true;\n    EaseLocalizeService.get('accountDetails').then(function(response) {\n      $scope.i18n = response;\n    }, function(error) {\n      console.error(error);\n    });\n    angular.extend($scope, {\n      accountDetailsData: accountDetailsData,\n      AccountType: $stateParams.accountDetails.lineOfBusiness,\n      // IsCD360: accountDetailsData.accountDetails.easeProductName,\n      on: true,\n      //transactionType: productTypeFactory.getTransactionType($stateParams.businessLine),\n      goToTransactions: function() {\n        $state.go(EaseConstant.states.kAccountDetailTransactions, {\n          accountReferenceId: $stateParams.accountReferenceId\n        });\n      },\n      goToSettings: function() {\n        $state.go(EaseConstant.states.kAccountDetailSettings);\n      },\n      goToAccountSummary: function(evt) {\n        EASEUtilsFactory.IsFooterDisplaySet(false);\n        var element = document.body.querySelector(\"#transactions\");\n        $animate.addClass(element, 'transactionAnimationBack');\n        $animate.addClass(document.body.querySelector(\"[detail-animation]\"), 'detailAnimationExit', function() {\n          $state.go(EaseConstant.states.kAccountSummary);\n        });\n      },\n      GetImage: function(src) {\n        return '/ease-ui' + EaseConstant.kBuildVersionPath + '/dist/features/AccountSummary/images/' + src +\n          '.png';\n      },\n      carouselClick: function(direction) {\n        $scope.carouselLoadingClass = EaseConstant.loading;\n        $state.go(EaseConstant.states.kAccountDetailTransactions, {\n          accountReferenceId: (direction === 'prev') ? $scope.carouselControls.showLeftArrow.accountReferenceId : $scope\n            .carouselControls.showRightArrow.accountReferenceId,\n          lineOfBusiness: (direction === 'prev') ? $scope.carouselControls.showLeftArrow.lineOfBusiness : $scope\n            .carouselControls.showRightArrow.lineOfBusiness\n        });\n      },\n      openStatement: function(evt) {}\n    });\n    if ($stateParams.accountDetails.lineOfBusiness === EaseConstant.lineOfBusiness.CreditCard &&\n      $scope.accountDetailsData.accountDetails !== null) {\n      $scope.accountDetailsData.accountDetails.displayBalanceDollarAmt = Math.abs(accountDetailsData.accountDetails\n        .presentBalanceDollorAmt);\n      $scope.accountDetailsData.accountDetails.displayBalanceCentsAmt =\n        Math.abs(accountDetailsData.accountDetails.presentBalanceCentsAmt);\n      $scope.accountDetailsData.accountDetails.displayAvailableCredit =\n        Math.abs(accountDetailsData.accountDetails.availableCredit);\n      $scope.accountDetailsData.accountDetails.creditLimit =\n        Math.abs(accountDetailsData.accountDetails.creditLimit);\n    } else if ($stateParams.accountDetails.lineOfBusiness === EaseConstant.lineOfBusiness.AutoLoan && typeof $scope\n      .accountDetailsData.accountDetails.vehicleType !== EaseConstant.kUndefined) {\n      $scope.accountDetailsData.accountDetails =\n        productTypeFactory.processAutoLoan($scope.accountDetailsData.accountDetails);\n    }\n\n    $scope.InitilizeTemplate = function() {\n      accountDetailService.getAccountPosition($stateParams.accountReferenceId).then(function(data) {\n        $scope.carouselControls = {\n          showLeftArrow: data.showLeftArrow,\n          showRightArrow: data.showRightArrow\n        };\n      });\n      var lobType = EASEUtilsFactory.SelectDetailsTransaction($stateParams.accountDetails).lobType;\n      $scope.productType = easeTemplates.get('template', lobType, 'detail');\n      $scope.transactionType = easeTemplates.get('template', lobType, 'transactions');\n    }\n  }\n  detailsParentController.$inject = [\"$scope\", \"accountDetailsData\", \"$state\", \"$stateParams\", \"productTypeFactory\", \"EaseConstant\", \"$window\", \"accountDetailService\", \"$animate\", \"EASEUtilsFactory\", \"EaseLocalizeService\", \"easeTemplates\"];\n\n  function transactionsController(filterTransactionsFilter, $scope, $rootScope, accountDetailsData, $stateParams, _,\n    sortConstant, EaseConstant, accountDetailService, EASEUtilsFactory, EaseLocalizeService) {\n\n    EaseLocalizeService.get('accountDetails').then(function(response) {\n      $scope.i18n = response;\n    }, function(error) {\n      console.error(error);\n    })\n    angular.extend($scope, {\n      items: [\n        { id: 30, name: 'Show Last 30 Days' },\n        { id: 60, name: 'Show Last 60 Days' },\n        { id: 90, name: 'Show Last 90 Days' }\n      ],\n      posted: accountDetailsData.transactions.entries ? accountDetailsData.transactions.entries : [],\n      pending: accountDetailsData.transactions.pending ? accountDetailsData.transactions.pending : [],\n      scheduled: accountDetailsData.transactions.scheduled ? accountDetailsData.transactions.scheduled : [],\n      sortType: {\n        sortDateDesc: true,\n        sortMerchantDesc: true,\n        sortCategoryDesc: true,\n        sortDescriptionDesc: true,\n        sortAmountDesc: true,\n        sortBalanceDesc: true\n      },\n      filterText: '',\n      searchProps: [] // this is used to customize parameters for Search Transactions\n    });\n    angular.extend($scope, {\n      item: $scope.items[0],\n      displayTransactionsList: ($scope.posted.length || $scope.pending.length || $scope.scheduled.length) ?\n        true : false,\n      displayTransactions: EASEUtilsFactory.mapSort($scope.posted, EaseConstant.sortConstantKeys.kTransactionDate,\n        EaseConstant.descendingSort.posted),\n      pendingTransactions: EASEUtilsFactory.mapSort($scope.pending, EaseConstant.sortConstantKeys.kTransactionDate,\n        EaseConstant.descendingSort.pending),\n      scheduledTransactions: EASEUtilsFactory.mapSort($scope.scheduled, EaseConstant.sortConstantKeys.kTransactionDate,\n        EaseConstant.descendingSort.scheduled),\n      sortIndex: sortConstant.dateDescending,\n      accDetailSorter: function(sortBy, sortArrow) {\n        if ($scope.sortIndex === sortConstant[sortBy + 'Descending']) {\n          $scope.displayTransactions = EASEUtilsFactory.mapSort($scope.posted,\n            EaseConstant.sortConstantKeys.kTransactionDate, EaseConstant.descendingSort.posted);\n          $scope.pendingTransactions = EASEUtilsFactory.mapSort($scope.pending,\n            EaseConstant.sortConstantKeys.kTransactionDate, EaseConstant.descendingSort.pending);\n          $scope.scheduledTransactions = EASEUtilsFactory.mapSort($scope.scheduled,\n            EaseConstant.sortConstantKeys.kTransactionDate, EaseConstant.descendingSort.scheduled);\n          $scope.sortIndex = sortConstant[sortBy + 'Ascending'];\n          $scope.sortType[sortArrow + 'Asc'] = false;\n          $scope.sortType[sortArrow + 'Desc'] = true;\n        } else {\n          $scope.displayTransactions = EASEUtilsFactory.mapSort($scope.posted,\n            EaseConstant.sortConstantKeys.kTransactionDate, !EaseConstant.descendingSort.posted);\n          $scope.pendingTransactions = EASEUtilsFactory.mapSort($scope.pending,\n            EaseConstant.sortConstantKeys.kTransactionDate, !EaseConstant.descendingSort.pending);\n          $scope.scheduledTransactions = EASEUtilsFactory.mapSort($scope.scheduled,\n            EaseConstant.sortConstantKeys.kTransactionDate, !EaseConstant.descendingSort.scheduled);\n          $scope.sortIndex = sortConstant[sortBy + 'Descending'];\n          $scope.sortType[sortArrow + 'Asc'] = true;\n          $scope.sortType[sortArrow + 'Desc'] = false;\n        }\n      },\n      changeItem: function(iem) {\n        var days = iem.id;\n        var urlParams = {\n          filter: days,\n          type: EaseConstant.urlPostFixerTransactions,\n          ProductCategory: $stateParams.accountDetails.lineOfBusiness\n        };\n        $scope.$parent.transactionsloadingClass = EaseConstant.loading;\n        accountDetailService.getAccountDetailsData(urlParams, $stateParams.accountReferenceId).then(function(\n          data) {\n          $scope.$parent.transactionsloadingClass = '';\n          $scope = accountDetailService.getfilterResult(data, $stateParams.accountDetails.lineOfBusiness);\n          $scope.displayTransactions = EASEUtilsFactory.mapSort($scope.posted, EaseConstant.sortConstantKeys\n            .kTransactionDate, EaseConstant.descendingSort.posted);\n          $scope.pendingTransactions = EASEUtilsFactory.mapSort($scope.pending, EaseConstant.sortConstantKeys\n            .kTransactionDate, EaseConstant.descendingSort.pending);\n          $scope.scheduledTransactions = EASEUtilsFactory.mapSort($scope.scheduled, EaseConstant.sortConstantKeys\n            .kTransactionDate, EaseConstant.descendingSort.scheduled);\n          $scope.sortIndex = sortConstant.dateDescending;\n        });\n      },\n      loadMoreTransactions: function() {\n        var urlParams = {\n          type: EaseConstant.urlPostFixerTransactions,\n          ProductCategory: $stateParams.accountDetails.lineOfBusiness\n        };\n        $scope.moreTransactionsloadingClass = EaseConstant.loading;\n        accountDetailService.getAccountDetailsData(urlParams, $scope.nextURL.href).then(function(data) {\n          $scope.moreTransactionsloadingClass = '';\n          $scope =\n            accountDetailService.appendMoreTransactions($scope, data, $stateParams.accountDetails.lineOfBusiness);\n          $scope.displayTransactions = EASEUtilsFactory.mapSort($scope.posted, EaseConstant.sortConstantKeys\n            .kTransactionDate, EaseConstant.descendingSort.posted);\n          $scope.pendingTransactions = EASEUtilsFactory.mapSort($scope.pending, EaseConstant.sortConstantKeys\n            .kTransactionDate, EaseConstant.descendingSort.pending);\n          $scope.scheduledTransactions = EASEUtilsFactory.mapSort($scope.scheduled, EaseConstant.sortConstantKeys\n            .kTransactionDate, EaseConstant.descendingSort.scheduled);\n          $scope.sortIndex = sortConstant.dateDescending;\n\n          if (typeof data.nextURL === EaseConstant.kUndefined) {\n            $scope.nextURL = false;\n          } else {\n            $scope.nextURL = data.nextURL;\n          }\n          EASEUtilsFactory.IsFooterDisplaySet(true);\n        });\n      },\n      haveSearchResults: function() {\n        var filteredPending = filterTransactionsFilter($scope.pendingTransactions, $scope.filterText,\n          $scope.searchProps);\n        var filteredDisplay = filterTransactionsFilter($scope.displayTransactions, $scope.filterText,\n          $scope.searchProps);\n        return filteredPending.length > 0 || filteredDisplay.length > 0;\n      }\n    });\n  }\n  transactionsController.$inject = [\"filterTransactionsFilter\", \"$scope\", \"$rootScope\", \"accountDetailsData\", \"$stateParams\", \"_\", \"sortConstant\", \"EaseConstant\", \"accountDetailService\", \"EASEUtilsFactory\", \"EaseLocalizeService\"];\n\n});\n\n",
    "define('AccountDetailDirectives',['angular'], function(angular) {\n  'use strict';\n  angular.module('AccountDetailsModule')\n    .directive('sampleDirective', ['EASEUtilsFactory', function(EASEUtilsFactory) {\n      return {\n        scope: { controllerFunction: '&callbackFn' },\n        link: function(scope, element, attrs) {\n          scope.controllerFunction({ arg1: 1 });\n        }\n      };\n\n    }])\n    .directive('accountDetailsNextAcct', ['EaseConstant', '$state', 'EASEUtilsFactory', 'pubsubService',\n      function(EaseConstant, $state, EASEUtilsFactory, pubsubService) {\n        return {\n          restrict: 'AE',\n          template: '<div><button aria-label=\"{{i18n.nextAriaLabel}}\" class=\"next_prev next_acct\"' +\n            'ng-hide=\"carouselControls.showRightArrow.isRightNavigable\"><img src=\"{{::nextButtonImg}}\" ' +\n            ' alt=\"{{i18n.nextImageAltText}}\" ></button></div>',\n          link: function(scope, elem) {\n            scope.nextButtonImg = EaseConstant.nextButtonImg;\n            elem.bind('click', function() {\n              pubsubService.pubsubCarouselClicked({ 'name': 'next:carousel' });\n              scope.carouselLoadingClass = EaseConstant.loading;\n              var element = scope.carouselControls.showRightArrow.account;\n\n              var stateObject = EASEUtilsFactory.getStateDetailsObject(element);\n\n              $state.go(EASEUtilsFactory.SelectDetailsTransaction(element).lobType +\n                'Details.transactions', stateObject);\n            });\n          }\n        };\n      }\n    ])\n    .directive('accountDetailsPrevAcct', ['EaseConstant', '$state', 'EASEUtilsFactory', 'pubsubService',\n      function(EaseConstant, $state, EASEUtilsFactory, pubsubService) {\n        return {\n          restrict: 'AE',\n          template: '<div><button aria-label=\"{{i18n.prevAriaLabel}}\" class=\"next_prev prev_acct\" ' +\n            ' ng-hide=\"carouselControls.showLeftArrow.isLeftNavigable\"><img src=\"{{::prevButtonImg}}\" ' +\n            ' alt=\"{{i18n.prevImageAltText}}\" ></button></div>',\n          link: function(scope, elem) {\n            scope.prevButtonImg = EaseConstant.prevButtonImg;\n            elem.bind('click', function() {\n              pubsubService.pubsubCarouselClicked({ 'name': 'previous:carousel' });\n              scope.carouselLoadingClass = EaseConstant.loading;\n\n              var element = scope.carouselControls.showLeftArrow.account;\n\n              var stateObject = EASEUtilsFactory.getStateDetailsObject(element);\n\n              $state.go(EASEUtilsFactory.SelectDetailsTransaction(element).lobType +\n                'Details.transactions', stateObject);\n            });\n          }\n        };\n      }\n    ])\n    .directive('transactionDate', ['dateFilter', function(dateFilter) {\n      return {\n        restrict: 'AE',\n        template: '<span class=\"right-col month\">{{month}}</span><span class=\"right-col day\">{{day}}</span>',\n        link: function(scope, element, attrs) {\n          scope.month = dateFilter(attrs.transactionDate, 'MMM');\n          scope.day = dateFilter(attrs.transactionDate, 'dd');\n        }\n      };\n    }]);\n});\n\n",
    "define('AccountDetailFilters',['angular', 'c1Date'], function(angular) {\n  'use strict';\n\n  angular.module('AccountDetailsModule')\n    .filter('filterTransactions', ['$locale', function($locale) {\n      return function(items, filterText, searchProps, dateRange) {\n        var output = [];\n        if (items) {\n          if (dateRange && dateRange.start && dateRange.end) { // filter by date range\n            var date1 = c1Date(dateRange.start);\n            var date2 = c1Date(dateRange.end);\n            var transDate;\n            for (var i = 0; i < items.length; i++) {\n              if (items[i].displayDate) {\n                transDate = c1Date(items[i].displayDate);\n              } else {\n                transDate = c1Date(items[i].paymentDate);\n              }\n              if (transDate.isBetween(date1, date2) || transDate.isBetween(date2, date1)) { // does not matter which date is earlier\n                output.push(items[i]);\n              }\n            }\n          } else {\n            output = items;\n          }\n        }\n        var searchArr = (searchProps && searchProps.length > 0) ?\n          searchProps : ['transactionDate', 'merchantName', 'category', 'transactionAmount', 'accountBalance'];\n        if (output.length > 0 && filterText) {\n          output = output.filter(function(element) {\n            if (filterText.substr(0, 3) === '...') { // remove '...' from start of search string, per card request\n              filterText = filterText.substr(3);\n            }\n            var returnValue = true;\n            var expected = filterText.toLowerCase();\n            var searchArray = searchArr;\n            returnValue = returnValue && searchArray.some(function(actual) {\n              // TO-DO: if data contracts updated, revisit this code\n              var elementVal = element;\n              var actualFields = actual.split('.'); // for searches on nested objects, i.e. transaction.merchant.name\n              for (var i = 0; i < actualFields.length; i++) {\n                elementVal = elementVal[actualFields[i]]; // value of field/object\n                if (!elementVal) { // trying to search on invalid field/object\n                  return false;\n                }\n              }\n              if (actual.toLowerCase().indexOf('date') !== -1) { // only want to check the date, not the time\n                var date = new Date(elementVal);\n                var month = date.getMonth();\n                var day = date.getDate();\n                var day2 = day < 10 ? '0' + day : day; // append 0 to dates 1-9 for consistency with mm/dd/yyyy search\n                var year = date.getFullYear();\n                var weekDay = date.getDay();\n                var monthStr = $locale.DATETIME_FORMATS.MONTH[month].toLowerCase(); // month name\n                var msStr = $locale.DATETIME_FORMATS.SHORTMONTH[month].toLowerCase(); // first three letters of month\n                var weekDayStr = $locale.DATETIME_FORMATS.SHORTDAY[weekDay].toLowerCase(); // day of week name\n                month = month < 9 ? '0' + (month + 1) : (month + 1); // add a 0 to months 1-9\n                var dateStr = month + '/' + day + '/' + year;\n                var dateStr2 = month + '/' + day2 + '/' + year;\n                var mdShortStr = weekDayStr + ', ' + msStr + ' ' + day + ', ' + year; // eee, mmm dd, yyyy\n                var mdShortStr2 = weekDayStr + ', ' + msStr + ' ' + day2 + ', ' + year;\n                var mdFullStr = weekDayStr + ', ' + monthStr + ' ' + day + ', ' + year; // eee, monthName dd, yyyy\n                var mdFullStr2 = weekDayStr + ', ' + monthStr + ' ' + day2 + ', ' + year;\n                return angular.isDefined(elementVal) &&\n                  (dateStr.indexOf(expected) !== -1 || dateStr2.indexOf(expected) !== -1 ||\n                    mdShortStr.indexOf(expected) !== -1 || mdShortStr2.indexOf(expected) !== -1 ||\n                    mdFullStr.indexOf(expected) !== -1 || mdFullStr2.indexOf(expected) !== -1);\n              } else if (actual.toLowerCase().indexOf('amount') !== -1 ||\n                actual.toLowerCase().indexOf('balance') !== -1) {\n                var moneyStr1;\n                var moneyStr2;\n                if (typeof elementVal === 'number') {\n                  var moneyVal = Math.abs(elementVal).toFixed(2); // allow search using XXX.XX input for money values\n                  moneyStr1 = '-$' + moneyVal;\n                  moneyStr2 = '$-' + moneyVal;\n                } else {\n                  moneyStr1 = '-$' + elementVal; // case where value is already stored as a string\n                  moneyStr2 = '$-' + elementVal;\n                }\n                return angular.isDefined(elementVal) &&\n                  (moneyStr1.indexOf(expected) !== -1 || moneyStr2.indexOf(expected) !== -1);\n              } else {\n                return angular.isDefined(elementVal) && elementVal.toString().toLowerCase().indexOf(\n                  expected) !== -1;\n              }\n            });\n            return returnValue;\n          });\n        }\n        return output;\n      };\n    }]);\n});\n\n",
    "define('AccountDetailBundle',[\n    'AccountDetailModule',\n    'AccountDetailServices',\n    'AccountDetailController',\n    'AccountDetailDirectives',\n    'AccountDetailFilters'\n  ],\n  function() {});\n\n",
    "\nrequire([\"AccountDetailBundle\"]);\n"
  ]
}